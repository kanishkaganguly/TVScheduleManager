import com.eclipsesource.json.JsonArray;
import com.eclipsesource.json.JsonObject;
import com.eclipsesource.json.JsonValue;
import java.awt.Component;
import java.awt.Container;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Font;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout.ParallelGroup;
import javax.swing.GroupLayout.SequentialGroup;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu.Separator;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * main_2.java
 *
 * Created on Nov 11, 2013, 10:11:38 PM
 */
/**
 *
 * @author Kanishka
 */
 
  /** Creates new form main_2 */
  public class main extends javax.swing.JFrame
 {
   public main()
  {
    initComponents();
  }
  private static final String USER_AGENT = "Mozilla/5.0";
  Connection conn;
  Statement stat;

 /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
 @SuppressWarnings("unchecked")
 // <editor-fold defaultstate="collapsed" desc="Generated Code">
  private void initComponents()
  {
    this.subscribed_shows = new JFrame();
    this.jLabel1 = new JLabel();
    this.jSeparator1 = new JSeparator();
    this.jScrollPane1 = new JScrollPane();
    this.subscribed_table = new JTable();
    this.show_subscribed = new JButton();
    this.alert_btn = new JButton();
    this.alert = new JFrame();
    this.jLabel2 = new JLabel();
    this.jScrollPane2 = new JScrollPane();
    this.alert_table = new JTable();
    this.jSeparator2 = new JSeparator();
    this.done_btn = new JButton();
    this.related_shows = new JFrame();
    this.jLabel3 = new JLabel();
    this.jSeparator4 = new JSeparator();
    this.jScrollPane4 = new JScrollPane();
    this.recommend_table = new JTable();
    this.done = new JButton();
    this.jSeparator7 = new JSeparator();
    this.jLabel5 = new JLabel();
    this.jLabel6 = new JLabel();
    this.jLabel7 = new JLabel();
    this.related_title = new JLabel();
    this.related_year = new JLabel();
    this.jScrollPane6 = new JScrollPane();
    this.related_overview = new JTextArea();
    this.jLabel8 = new JLabel();
    this.url_display = new JLabel();
    this.open_url = new JButton();
    this.help_dialog = new JDialog();
    this.jLabel4 = new JLabel();
    this.jScrollPane5 = new JScrollPane();
    this.jTextArea1 = new JTextArea();
    this.jSeparator6 = new JSeparator();
    this.dismiss = new JButton();
    this.update_alert = new JOptionPane();
    this.header = new JLabel();
    this.separator = new JSeparator();
    this.show_name = new JTextField();
    this.get_schedule = new JButton();
    this.schedule_scroll = new JScrollPane();
    this.schedule = new JTable();
    this.conn_stat = new JLabel();
    this.season_name = new JTextField();
    this.jSeparator3 = new JSeparator();
    this.title = new JLabel();
    this.episode = new JLabel();
    this.overview = new JLabel();
    this.jScrollPane3 = new JScrollPane();
    this.overview_display = new JTextArea();
    this.title_display = new JLabel();
    this.episode_display = new JLabel();
    this.image = new JLabel();
    this.console_panel = new JPanel();
    this.console_scroll = new JScrollPane();
    this.console = new JTextArea();
    this.console_toggle = new JButton();
    this.control_panel = new JPanel();
    this.subscribe = new JButton();
    this.unsubscribe = new JButton();
    this.shows_display = new JButton();
    this.recommend = new JButton();
    this.main_menu = new JMenuBar();
    this.main = new JMenu();
    this.subscribe_menu = new JMenuItem();
    this.unsubscribe_menu = new JMenuItem();
    this.subscribed_menu = new JMenuItem();
    this.recommend_menu = new JMenuItem();
    this.update_check = new JMenuItem();
    this.jSeparator5 = new JPopupMenu.Separator();
    this.quit_menu = new JMenuItem();
    this.help = new JMenu();
    this.help_menu = new JMenuItem();

    this.subscribed_shows.setTitle("SUBSCRIBED SHOWS");
    this.subscribed_shows.setResizable(false);

    this.jLabel1.setFont(new Font("Dialog", 1, 18));
    this.jLabel1.setText("LIST OF SUBSCRIBED SHOWS");

    this.subscribed_table.setModel(new DefaultTableModel(new Object[][] { { null, null }, { null, null }, { null, null }, { null, null } }, new String[] { "SHOW", "SEASON" }));

    this.jScrollPane1.setViewportView(this.subscribed_table);

    this.show_subscribed.setText("SUBSCRIBED SHOWS");
    this.show_subscribed.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        main.this.show_subscribedActionPerformed(evt);
      }
    });
    this.alert_btn.setText("SHOW ALERTS");
    this.alert_btn.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        main.this.alert_btnActionPerformed(evt);
      }
    });
    GroupLayout subscribed_showsLayout = new GroupLayout(this.subscribed_shows.getContentPane());
    this.subscribed_shows.getContentPane().setLayout(subscribed_showsLayout);
    subscribed_showsLayout.setHorizontalGroup(subscribed_showsLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(subscribed_showsLayout.createSequentialGroup().addContainerGap().addComponent(this.jLabel1).addContainerGap(-1, 32767)).addComponent(this.jSeparator1, GroupLayout.Alignment.TRAILING, -1, 286, 32767).addGroup(subscribed_showsLayout.createSequentialGroup().addContainerGap().addComponent(this.jScrollPane1, -1, 266, 32767).addContainerGap()).addGroup(subscribed_showsLayout.createSequentialGroup().addContainerGap().addComponent(this.show_subscribed, -1, 261, 32767).addGap(15, 15, 15)).addGroup(subscribed_showsLayout.createSequentialGroup().addContainerGap().addComponent(this.alert_btn, -1, 261, 32767).addGap(15, 15, 15)));

    subscribed_showsLayout.setVerticalGroup(subscribed_showsLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(subscribed_showsLayout.createSequentialGroup().addComponent(this.jLabel1).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(this.jSeparator1, -2, 10, -2).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(this.jScrollPane1, -2, 224, -2).addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED).addComponent(this.show_subscribed).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(this.alert_btn).addContainerGap(-1, 32767)));

    this.alert.setTitle("Show Alerts");
    this.alert.setResizable(false);

    this.jLabel2.setFont(new Font("Dialog", 1, 18));
    this.jLabel2.setText("SHOW ALERTS");

    this.alert_table.setModel(new DefaultTableModel(new Object[][] { { null, null, null }, { null, null, null }, { null, null, null }, { null, null, null } }, new String[] { "Episode", "Title", "Releasing On" }));

    this.jScrollPane2.setViewportView(this.alert_table);

    this.done_btn.setText("DONE");
    this.done_btn.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        main.this.done_btnActionPerformed(evt);
      }
    });
    GroupLayout alertLayout = new GroupLayout(this.alert.getContentPane());
    this.alert.getContentPane().setLayout(alertLayout);
    alertLayout.setHorizontalGroup(alertLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(alertLayout.createSequentialGroup().addContainerGap().addComponent(this.jScrollPane2, -1, 380, 32767).addContainerGap()).addGroup(GroupLayout.Alignment.TRAILING, alertLayout.createSequentialGroup().addContainerGap(122, 32767).addComponent(this.jLabel2).addGap(145, 145, 145)).addComponent(this.jSeparator2, -1, 400, 32767).addGroup(alertLayout.createSequentialGroup().addGap(158, 158, 158).addComponent(this.done_btn).addContainerGap(181, 32767)));

    alertLayout.setVerticalGroup(alertLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(alertLayout.createSequentialGroup().addContainerGap().addComponent(this.jLabel2).addGap(7, 7, 7).addComponent(this.jSeparator2, -2, -1, -2).addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED).addComponent(this.jScrollPane2, -2, 275, -2).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(this.done_btn).addContainerGap(-1, 32767)));

    this.related_shows.setTitle("Recommended Shows");
    this.related_shows.setResizable(false);

    this.jLabel3.setFont(new Font("Dialog", 1, 24));
    this.jLabel3.setText("Recommended Shows");

    this.recommend_table.setModel(new DefaultTableModel(new Object[][] { { null, null }, { null, null }, { null, null }, { null, null } }, new String[] { "Show", "URL" }));

    this.recommend_table.setAutoResizeMode(4);
    this.recommend_table.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent evt) {
        main.this.recommend_tableMouseClicked(evt);
      }
    });
    this.jScrollPane4.setViewportView(this.recommend_table);

    this.done.setText("DONE");
    this.done.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        main.this.doneActionPerformed(evt);
      }
    });
    this.jSeparator7.setOrientation(1);

    this.jLabel5.setFont(new Font("Dialog", 1, 18));
    this.jLabel5.setText("Title ");

    this.jLabel6.setFont(new Font("Dialog", 1, 18));
    this.jLabel6.setText("Year");

    this.jLabel7.setFont(new Font("Dialog", 1, 18));
    this.jLabel7.setText("Overview");

    this.related_title.setHorizontalAlignment(0);
    this.related_title.setBorder(BorderFactory.createEtchedBorder());

    this.related_year.setHorizontalAlignment(0);
    this.related_year.setBorder(BorderFactory.createEtchedBorder());

    this.related_overview.setColumns(20);
    this.related_overview.setLineWrap(true);
    this.related_overview.setRows(5);
    this.related_overview.setWrapStyleWord(true);
    this.jScrollPane6.setViewportView(this.related_overview);

    this.jLabel8.setFont(new Font("Dialog", 1, 18));
    this.jLabel8.setText("URL:");

    this.url_display.setHorizontalAlignment(0);
    this.url_display.setBorder(BorderFactory.createEtchedBorder());

    this.open_url.setText("GO");
    this.open_url.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        main.this.open_urlActionPerformed(evt);
      }
    });
    GroupLayout related_showsLayout = new GroupLayout(this.related_shows.getContentPane());
    this.related_shows.getContentPane().setLayout(related_showsLayout);
    related_showsLayout.setHorizontalGroup(related_showsLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(related_showsLayout.createSequentialGroup().addGroup(related_showsLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(related_showsLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false).addGroup(related_showsLayout.createSequentialGroup().addGap(65, 65, 65).addComponent(this.jLabel3)).addGroup(related_showsLayout.createSequentialGroup().addGap(10, 10, 10).addComponent(this.jScrollPane4, -2, 375, -2)).addComponent(this.jSeparator4, -2, 385, -2).addGroup(related_showsLayout.createSequentialGroup().addContainerGap().addComponent(this.jLabel8).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(this.url_display, -1, -1, 32767).addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED).addComponent(this.open_url))).addGroup(related_showsLayout.createSequentialGroup().addGap(160, 160, 160).addComponent(this.done))).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, -1, 32767).addComponent(this.jSeparator7, -2, -1, -2).addGap(18, 18, 18).addGroup(related_showsLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(this.jScrollPane6, -1, 246, 32767).addComponent(this.jLabel5).addComponent(this.jLabel6).addComponent(this.related_title, -1, 246, 32767).addComponent(this.jLabel7).addComponent(this.related_year, GroupLayout.Alignment.TRAILING, -1, 246, 32767)).addContainerGap()));

    related_showsLayout.setVerticalGroup(related_showsLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(related_showsLayout.createSequentialGroup().addGap(6, 6, 6).addComponent(this.jLabel3).addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED).addComponent(this.jSeparator4, -2, 10, -2).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(this.jScrollPane4, -2, 207, -2).addGap(18, 18, 18).addGroup(related_showsLayout.createParallelGroup(GroupLayout.Alignment.TRAILING).addComponent(this.jLabel8).addComponent(this.open_url).addComponent(this.url_display, -2, 24, -2)).addGap(18, 18, 18).addComponent(this.done).addContainerGap(-1, 32767)).addComponent(this.jSeparator7, -1, 366, 32767).addGroup(related_showsLayout.createSequentialGroup().addContainerGap().addComponent(this.jLabel5).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(this.related_title, -2, 30, -2).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(this.jLabel6).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(this.related_year, -2, 30, -2).addGap(16, 16, 16).addComponent(this.jLabel7).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(this.jScrollPane6, -1, 172, 32767).addContainerGap()));

    this.help_dialog.setTitle("Help");

    this.jLabel4.setFont(new Font("Dialog", 1, 24));
    this.jLabel4.setText("TV Schedule Manager Help");

    this.jTextArea1.setColumns(20);
    this.jTextArea1.setLineWrap(true);
    this.jTextArea1.setRows(5);
    this.jTextArea1.setText("This is a basic set of useful info to help you use this app better.  \n\n1) You need a proper internet connection to use this, obviously. \n\n2) Do not worry about the console, it was mainly for my debugging and for you to give me info in case of any queries regarding error. Just ignore it. \n\n3) Most tables are clickable, so for further info, etc. just click on the entry of your choice. \n\n4) Images aren't working at the moment, but I am fixing that ASAP.  \n\n**Contact me on my wiki on SourceForge if you have any doubts or problems with this app. **");
    this.jScrollPane5.setViewportView(this.jTextArea1);

    this.dismiss.setText("DISMISS");
    this.dismiss.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        main.this.dismissActionPerformed(evt);
      }
    });
    GroupLayout help_dialogLayout = new GroupLayout(this.help_dialog.getContentPane());
    this.help_dialog.getContentPane().setLayout(help_dialogLayout);
    help_dialogLayout.setHorizontalGroup(help_dialogLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(this.jSeparator6, -1, 330, 32767).addGroup(help_dialogLayout.createSequentialGroup().addContainerGap().addGroup(help_dialogLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(this.jScrollPane5, GroupLayout.Alignment.TRAILING, -1, 310, 32767).addComponent(this.jLabel4)).addContainerGap()).addGroup(help_dialogLayout.createSequentialGroup().addGap(109, 109, 109).addComponent(this.dismiss).addContainerGap(148, 32767)));

    help_dialogLayout.setVerticalGroup(help_dialogLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(help_dialogLayout.createSequentialGroup().addComponent(this.jLabel4).addGap(4, 4, 4).addComponent(this.jSeparator6, -2, 10, -2).addGap(4, 4, 4).addComponent(this.jScrollPane5, -2, 301, -2).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(this.dismiss).addContainerGap(-1, 32767)));

    setDefaultCloseOperation(3);
    setTitle("TV Series Schedule");
    setResizable(false);
    addWindowListener(new WindowAdapter() {
      public void windowOpened(WindowEvent evt) {
        main.this.formWindowOpened(evt);
      }
    });
    this.header.setFont(new Font("Dialog", 1, 24));
    this.header.setHorizontalAlignment(0);
    this.header.setText("TV Schedule Reminder App");

    this.show_name.setHorizontalAlignment(0);
    this.show_name.setText("Show Name");
    this.show_name.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent evt) {
        main.this.show_nameMouseEntered(evt);
      }
      public void mouseExited(MouseEvent evt) {
        main.this.show_nameMouseExited(evt);
      }
    });
    this.get_schedule.setText("GET SCHEDULE");
    this.get_schedule.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        main.this.get_scheduleActionPerformed(evt);
      }
    });
    this.schedule.setModel(new DefaultTableModel(new Object[][] { { null, null, null }, { null, null, null }, { null, null, null } }, new String[] { "Episode", "Title", "Release Date" }));

    this.schedule.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent evt) {
        main.this.scheduleMouseClicked(evt);
      }
    });
    this.schedule_scroll.setViewportView(this.schedule);

    this.conn_stat.setFont(new Font("Dialog", 0, 14));
    this.conn_stat.setHorizontalAlignment(0);
    this.conn_stat.setText("CONNECTION STATUS : ");

    this.season_name.setFont(new Font("Dialog", 0, 12));
    this.season_name.setHorizontalAlignment(0);
    this.season_name.setText("Season");
    this.season_name.addMouseListener(new MouseAdapter() {
      public void mouseEntered(MouseEvent evt) {
        main.this.season_nameMouseEntered(evt);
      }
      public void mouseExited(MouseEvent evt) {
        main.this.season_nameMouseExited(evt);
      }
    });
    this.jSeparator3.setOrientation(1);

    this.title.setFont(new Font("Dialog", 1, 14));
    this.title.setText("TITLE:");

    this.episode.setFont(new Font("Dialog", 1, 14));
    this.episode.setText("EPISODE:");

    this.overview.setFont(new Font("Dialog", 1, 14));
    this.overview.setText("OVERVIEW:");

    this.overview_display.setColumns(20);
    this.overview_display.setEditable(false);
    this.overview_display.setLineWrap(true);
    this.overview_display.setRows(5);
    this.overview_display.setWrapStyleWord(true);
    this.jScrollPane3.setViewportView(this.overview_display);

    this.title_display.setHorizontalAlignment(0);
    this.title_display.setBorder(BorderFactory.createEtchedBorder());

    this.episode_display.setHorizontalAlignment(0);
    this.episode_display.setBorder(BorderFactory.createEtchedBorder());

    this.image.setHorizontalAlignment(0);
    this.image.setText("IMAGES NOT WORKING CURRENTLY");
    this.image.setBorder(BorderFactory.createEtchedBorder());

    this.console_panel.setBorder(BorderFactory.createTitledBorder("Console"));

    this.console.setColumns(20);
    this.console.setEditable(false);
    this.console.setRows(5);
    this.console_scroll.setViewportView(this.console);

    this.console_toggle.setText("TOGGLE CONSOLE");
    this.console_toggle.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        main.this.console_toggleActionPerformed(evt);
      }
    });
    GroupLayout console_panelLayout = new GroupLayout(this.console_panel);
    this.console_panel.setLayout(console_panelLayout);
    console_panelLayout.setHorizontalGroup(console_panelLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(console_panelLayout.createSequentialGroup().addContainerGap(52, 32767).addComponent(this.console_toggle).addGap(36, 36, 36)).addComponent(this.console_scroll, GroupLayout.Alignment.TRAILING, -1, 209, 32767));

    console_panelLayout.setVerticalGroup(console_panelLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(console_panelLayout.createSequentialGroup().addComponent(this.console_toggle).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, -1, 32767).addComponent(this.console_scroll, -2, 72, -2).addContainerGap()));

    this.control_panel.setBorder(BorderFactory.createTitledBorder("Control Panel"));

    this.subscribe.setText("SUBSCRIBE");
    this.subscribe.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        main.this.subscribeActionPerformed(evt);
      }
    });
    this.unsubscribe.setText("UNSUBSCRIBE");
    this.unsubscribe.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        main.this.unsubscribeActionPerformed(evt);
      }
    });
    this.shows_display.setText("SUBSCRIBED SHOWS");
    this.shows_display.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        main.this.shows_displayActionPerformed(evt);
      }
    });
    this.recommend.setText("RECOMMEND OTHER SHOWS");
    this.recommend.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent evt) {
        main.this.recommendActionPerformed(evt);
      }
    });
    GroupLayout control_panelLayout = new GroupLayout(this.control_panel);
    this.control_panel.setLayout(control_panelLayout);
    control_panelLayout.setHorizontalGroup(control_panelLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(control_panelLayout.createSequentialGroup().addContainerGap(-1, 32767).addGroup(control_panelLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(control_panelLayout.createParallelGroup(GroupLayout.Alignment.TRAILING, false).addComponent(this.subscribe, GroupLayout.Alignment.LEADING, -1, -1, 32767).addComponent(this.unsubscribe, GroupLayout.Alignment.LEADING, -1, -1, 32767)).addComponent(this.shows_display).addComponent(this.recommend))));

    control_panelLayout.linkSize(0, new Component[] { this.recommend, this.shows_display, this.subscribe, this.unsubscribe });

    control_panelLayout.setVerticalGroup(control_panelLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(control_panelLayout.createSequentialGroup().addComponent(this.subscribe).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(this.unsubscribe).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(this.shows_display).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, -1, 32767).addComponent(this.recommend)));

    this.main.setText("Main Menu");

    this.subscribe_menu.setText("Subscribe");
    this.subscribe_menu.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent evt) {
        main.this.subscribe_menuMouseClicked(evt);
      }
    });
    this.main.add(this.subscribe_menu);

    this.unsubscribe_menu.setText("Unsubscribe");
    this.unsubscribe_menu.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent evt) {
        main.this.unsubscribe_menuMouseClicked(evt);
      }
    });
    this.main.add(this.unsubscribe_menu);

    this.subscribed_menu.setText("Subscribed Shows");
    this.subscribed_menu.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent evt) {
        main.this.subscribed_menuMouseClicked(evt);
      }
    });
    this.main.add(this.subscribed_menu);

    this.recommend_menu.setText("Recommend Other Shows");
    this.recommend_menu.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent evt) {
        main.this.recommend_menuMouseClicked(evt);
      }
    });
    this.main.add(this.recommend_menu);

    this.update_check.setText(" Check for Updates");
    this.update_check.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent evt) {
        main.this.update_checkMouseClicked(evt);
      }
    });
    this.main.add(this.update_check);
    this.main.add(this.jSeparator5);

    this.quit_menu.setText("Quit");
    this.quit_menu.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent evt) {
        main.this.quit_menuMouseClicked(evt);
      }
    });
    this.main.add(this.quit_menu);

    this.main_menu.add(this.main);

    this.help.setText("Help");

    this.help_menu.setText("FAQ and Help");
    this.help_menu.addMouseListener(new MouseAdapter() {
      public void mouseClicked(MouseEvent evt) {
        main.this.help_menuMouseClicked(evt);
      }
    });
    this.help.add(this.help_menu);

    this.main_menu.add(this.help);

    setJMenuBar(this.main_menu);

    GroupLayout layout = new GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addGap(128, 128, 128).addComponent(this.header)).addGroup(layout.createSequentialGroup().addContainerGap().addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(this.conn_stat).addComponent(this.schedule_scroll, -1, 541, 32767).addGroup(layout.createSequentialGroup().addComponent(this.show_name, -2, 426, -2).addGap(18, 18, 18).addComponent(this.season_name, -2, 80, -2)).addGroup(layout.createSequentialGroup().addComponent(this.console_panel, -2, -1, -2).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 125, 32767).addComponent(this.control_panel, -2, -1, -2)))).addComponent(this.separator, -2, 551, -2)).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)).addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addContainerGap().addComponent(this.get_schedule).addGap(215, 215, 215))).addComponent(this.jSeparator3, -2, 11, -2).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addComponent(this.title_display, -1, 204, 32767).addComponent(this.image, -1, 204, 32767).addComponent(this.title).addComponent(this.jScrollPane3, -1, 204, 32767).addComponent(this.overview).addGroup(layout.createSequentialGroup().addComponent(this.episode).addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED).addComponent(this.episode_display, -1, 129, 32767))).addContainerGap()));

    layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING).addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addContainerGap().addComponent(this.header).addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED).addComponent(this.separator, -2, 10, -2).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(this.show_name, -2, -1, -2).addComponent(this.season_name, -2, -1, -2)).addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED).addComponent(this.conn_stat).addGap(13, 13, 13).addComponent(this.schedule_scroll, -1, 178, 32767).addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED).addComponent(this.get_schedule).addGap(18, 18, 18).addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING).addComponent(this.console_panel, -2, -1, -2).addComponent(this.control_panel, -2, -1, -2)).addContainerGap()).addComponent(this.jSeparator3, -1, 511, 32767).addGroup(layout.createSequentialGroup().addContainerGap().addComponent(this.image, -2, 164, -2).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(this.title).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(this.title_display, -1, 25, 32767).addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE).addComponent(this.episode).addComponent(this.episode_display, -2, 26, -2)).addGap(18, 18, 18).addComponent(this.overview).addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED).addComponent(this.jScrollPane3, -2, 189, -2).addContainerGap()));

    pack();
  }// </editor-fold>

  private void get_scheduleActionPerformed(ActionEvent evt) {
    String showname = this.show_name.getText();
    String season = this.season_name.getText();
    showname = showname.replace(" ", "-");
    String api_url = new StringBuilder().append("http://api.trakt.tv/show/season.json/69c3d6904562825695e5d3c24835043c/").append(showname).append("/").append(season).toString();
    try {
      URL url = new URL(api_url);
      HttpURLConnection con = (HttpURLConnection)url.openConnection();
      con.setRequestMethod("GET");
      con.setRequestProperty("User-Agent", "Mozilla/5.0");
      int responseCode = con.getResponseCode();

      if (responseCode == 200)
        this.conn_stat.setText("Connection Status : OK");
      else {
        this.conn_stat.setText("Connection Status : ERR");
      }
      BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));

      StringBuilder response = new StringBuilder();
      String inputLine;
      while ((inputLine = in.readLine()) != null) {
        response.append(inputLine);
      }
      in.close();
      String s = response.toString();
      JsonArray json = JsonArray.readFrom(s);
      DefaultTableModel model = (DefaultTableModel)this.schedule.getModel();
      int rows = model.getRowCount();
      if (rows > 0) {
        for (int x = 0; x < rows; x++) {
          model.removeRow(0);
        }
      }
      for (int i = 0; i < json.size(); i++) {
        JsonObject show = json.get(i).asObject();
        int episode = show.get("episode").asInt();
        String date = show.get("first_aired_iso").asString();
        String title = show.get("title").asString();
        String date_formatted = date.substring(0, date.indexOf("T"));
        SimpleDateFormat original = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat target = new SimpleDateFormat("dd-MMM-yyyy");
        Date unformatteddate = original.parse(date_formatted);
        String formattedDate = target.format(unformatteddate);
        model.addRow(new Object[] { Integer.valueOf(episode), title, formattedDate });
      }
      this.conn_stat.setText("Connection Status : CLOSED");
      con.disconnect();
    } catch (Exception e) {
      this.console.append(new StringBuilder().append(e.getMessage()).append('\n').toString());
    }
  }

  private void show_nameMouseEntered(MouseEvent evt) {
    if (this.show_name.getText().equals("Show Name"))
      this.show_name.setText("");
  }

  private void show_nameMouseExited(MouseEvent evt)
  {
    if (this.show_name.getText() == null)
      this.show_name.setText("Show Name");
  }

  private void season_nameMouseEntered(MouseEvent evt)
  {
    if (this.season_name.getText().equals("Season"))
      this.season_name.setText("");
  }

  private void season_nameMouseExited(MouseEvent evt)
  {
    if (this.season_name.getText() == null)
      this.season_name.setText("Season");
  }

  private void shows_displayActionPerformed(ActionEvent evt)
  {
    Dimension min_size = new Dimension(300, 400);
    this.subscribed_shows.setMinimumSize(min_size);
    this.subscribed_shows.setVisible(true);
  }

  private void subscribeActionPerformed(ActionEvent evt) {
    String show_val = this.show_name.getText();
    String season_val = this.season_name.getText();

    String show = show_val.replace(" ", "-");
    String add_show = new StringBuilder().append("INSERT INTO SCHEDULE VALUES ('").append(show).append("',").append(season_val).append(")").toString();
    try {
      Integer.parseInt(season_val);
      this.stat.execute(add_show);
      this.console.append("SHOW ADDED\n");
    } catch (Exception e) {
      this.console.append(new StringBuilder().append(e.getMessage()).append('\n').toString());
      this.console.append("PLEASE CHECK ALL ENTRIES\n");
    }
  }

  private void unsubscribeActionPerformed(ActionEvent evt) {
    String show_val = this.show_name.getText();
    String season_val = this.season_name.getText();
    String show = show_val.replace(" ", "-");
    String remove_show = new StringBuilder().append("DELETE FROM SCHEDULE WHERE SHOW = '").append(show).append("' AND SEASON = ").append(season_val).toString();
    try {
      Integer.parseInt(season_val);
      this.stat.execute(remove_show);
      this.console.append("SHOW REMOVED\n");
    } catch (Exception e) {
      this.console.append(new StringBuilder().append(e.getMessage()).append('\n').toString());
      this.console.append("PLEASE CHECK ALL ENTRIES\n");
    }
  }

  private void console_toggleActionPerformed(ActionEvent evt) {
    if (this.console.isVisible()) {
      this.console_scroll.setVisible(false);
      this.console.setVisible(false);
    } else if (!this.console.isVisible()) {
      this.console_scroll.setVisible(true);
      this.console.setVisible(true);
    }
  }

  private void show_subscribedActionPerformed(ActionEvent evt) {
    DefaultTableModel model = (DefaultTableModel)this.subscribed_table.getModel();
    int rows = model.getRowCount();
    if (rows > 0) {
      for (int x = 0; x < rows; x++) {
        model.removeRow(0);
      }
    }
    try
    {
      ResultSet rs = this.stat.executeQuery("select * from schedule");
      while (rs.next())
        model.addRow(new Object[] { rs.getString("SHOW"), rs.getString("SEASON") });
    }
    catch (Exception e) {
      this.console.append(new StringBuilder().append(e.getMessage()).append('\n').toString());
    }
  }

  private void done_btnActionPerformed(ActionEvent evt) {
    this.alert.setVisible(false);
  }

  private void alert_btnActionPerformed(ActionEvent evt) {
    DefaultTableModel alert_model = (DefaultTableModel)this.alert_table.getModel();
    int rows = alert_model.getRowCount();
    if (rows > 0) {
      for (int x = 0; x < rows; x++) {
        alert_model.removeRow(0);
      }
    }
    String show = null; String season = null;
    List list = new ArrayList();
    try {
      ResultSet rs = this.stat.executeQuery("select * from schedule");
      while (rs.next()) {
        show = rs.getString("SHOW");
        season = rs.getString("SEASON");
        list.add(new String[] { show, season });
      }
    } catch (Exception e) {
      System.out.println(e.getMessage());
    }
    for (String[] ss : list) {
      show = ss[0];
      season = ss[1];
      String api_url = new StringBuilder().append("http://api.trakt.tv/show/season.json/69c3d6904562825695e5d3c24835043c/").append(show).append("/").append(season).toString();
      try {
        URL url = new URL(api_url);
        HttpURLConnection con = (HttpURLConnection)url.openConnection();
        con.setRequestMethod("GET");
        con.setRequestProperty("User-Agent", "Mozilla/5.0");
        int responseCode = con.getResponseCode();
        if (responseCode == 200)
          this.conn_stat.setText("Connection Status : OK");
        else {
          this.conn_stat.setText("Connection Status : ERR"); } 
          BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream())); Throwable localThrowable2 = null;
          StringBuilder response;
          try { response = new StringBuilder();
            String inputLine;
            while ((inputLine = in.readLine()) != null)
              response.append(inputLine);
          }
          catch (Throwable localThrowable1)
          {
            localThrowable2 = localThrowable1; throw localThrowable1;
          }
          finally
          {
            if (in != null) if (localThrowable2 != null) try { in.close(); } catch (Throwable x2) { localThrowable2.addSuppressed(x2); } else in.close(); 
          }
          String s = response.toString();
          JsonArray json = JsonArray.readFrom(s);
          for (int i = 0; i < json.size(); i++) {
            JsonObject show_json = json.get(i).asObject();
            int episode = show_json.get("episode").asInt();
            String date = show_json.get("first_aired_iso").asString();
            String title = show_json.get("title").asString();
            String date_formatted = date.substring(0, date.indexOf("T"));
            SimpleDateFormat original = new SimpleDateFormat("yyyy-MM-dd");
            SimpleDateFormat target = new SimpleDateFormat("dd-MMM-yyyy");
            Date unformatteddate = original.parse(date_formatted);
            String dateStart = target.format(unformatteddate);
            Date curr_date = new Date();
            String dateStop = target.format(curr_date);
            Date d1 = null;
            Date d2 = null;
            d1 = target.parse(dateStart);
            d2 = target.parse(dateStop);
            long diff = d2.getTime() - d1.getTime();
            long diffDays = diff / 86400000L;
            if (diffDays < 0L)
              alert_model.addRow(new Object[] { new StringBuilder().append(show).append(" - S").append(episode).toString(), title, dateStart });
          }
        }
        catch (Exception e) {
          System.out.println(e.getMessage());
        }
        Dimension alert_size = new Dimension(500, 400);
        this.alert.setMinimumSize(alert_size);
        this.alert.setVisible(true);
      }
    }

    private void scheduleMouseClicked(MouseEvent evt) {
      int episode_row = this.schedule.getSelectedRow();
      int episode_val = ((Integer)this.schedule.getValueAt(episode_row, 0)).intValue();
      String showname = this.show_name.getText();
      String season = this.season_name.getText();
      showname = showname.replace(" ", "-");
      String api_url = new StringBuilder().append("http://api.trakt.tv/show/season.json/69c3d6904562825695e5d3c24835043c/").append(showname).append("/").append(season).toString();
      try {
        URL url = new URL(api_url);
        HttpURLConnection con = (HttpURLConnection)url.openConnection();
        con.setRequestMethod("GET");
        con.setRequestProperty("User-Agent", "Mozilla/5.0");
        int responseCode = con.getResponseCode();
        if (responseCode == 200)
          this.conn_stat.setText("Connection Status : OK");
        else {
          this.conn_stat.setText("Connection Status : ERR");
        }
        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));

        StringBuilder response = new StringBuilder();
        String inputLine;
        while ((inputLine = in.readLine()) != null) {
          response.append(inputLine);
        }
        in.close();
        String s = response.toString();
        JsonArray json = JsonArray.readFrom(s);
        for (int i = 0; i < json.size(); i++) {
          JsonObject show = json.get(i).asObject();
          int episode = show.get("episode").asInt();
          String date = show.get("first_aired_iso").asString();
          String title = show.get("title").asString();
          String imag = show.get("screen").asString();
          String date_formatted = date.substring(0, date.indexOf("T"));
          SimpleDateFormat original = new SimpleDateFormat("yyyy-MM-dd");
          SimpleDateFormat target = new SimpleDateFormat("dd-MMM-yyyy");
          Date unformatteddate = original.parse(date_formatted);
          String formattedDate = target.format(unformatteddate);
          if (episode == episode_val) {
            this.title_display.setText(title);
            this.episode_display.setText(new StringBuilder().append("").append(episode).toString());
            this.overview_display.setText(show.get("overview").asString());
            System.out.println(imag);
            URL img_url = new URL(imag);
            Image url_img = ImageIO.read(img_url.openStream()).getScaledInstance(this.image.getWidth(), this.image.getHeight(), 4);
            ImageIcon resized = new ImageIcon(url_img);
            this.image.setIcon(resized);
          }
        }
        con.disconnect();
        this.conn_stat.setText("Connection Status : CLOSED");
      } catch (Exception e) {
        this.console.append(new StringBuilder().append(e.getMessage()).append('\n').toString());
      }
    }

    private void recommendActionPerformed(ActionEvent evt) {
      String showname = this.show_name.getText();
      showname = showname.replace(" ", "-");
      DefaultTableModel recommend_model = (DefaultTableModel)this.recommend_table.getModel();
      String api_url = new StringBuilder().append("http://api.trakt.tv/show/related.json/69c3d6904562825695e5d3c24835043c/").append(showname).toString();
      try {
        URL url = new URL(api_url);
        HttpURLConnection con = (HttpURLConnection)url.openConnection();
        con.setRequestMethod("GET");
        con.setRequestProperty("User-Agent", "Mozilla/5.0");
        int responseCode = con.getResponseCode();
        if (responseCode == 200)
          this.conn_stat.setText("Connection Status : OK");
        else {
          this.conn_stat.setText("Connection Status : ERR");
        }
        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));

        StringBuilder response = new StringBuilder();
        String inputLine;
        while ((inputLine = in.readLine()) != null) {
          response.append(inputLine);
        }
        in.close();
        String s = response.toString();
        JsonArray json = JsonArray.readFrom(s);

        int rows = recommend_model.getRowCount();
        if (rows > 0) {
          for (int x = 0; x < rows; x++) {
            recommend_model.removeRow(0);
          }
        }
        for (int i = 0; i < json.size(); i++) {
          JsonObject show = json.get(i).asObject();
          String show_url = show.get("url").asString();
          String title = show.get("title").asString();
          recommend_model.addRow(new Object[] { title, show_url });
        }
        this.conn_stat.setText("Connection Status : CLOSED");
        con.disconnect();
      } catch (Exception e) {
        this.console.append(new StringBuilder().append(e.getMessage()).append('\n').toString());
      }
      Dimension size = new Dimension(700, 430);
      this.related_shows.setMinimumSize(size);
      this.related_shows.setVisible(true);
    }

    private void recommend_tableMouseClicked(MouseEvent evt) {
      int row_val = this.recommend_table.getSelectedRow();
      String show_name = (String)this.recommend_table.getValueAt(row_val, 0);
      String url_val = (String)this.recommend_table.getValueAt(row_val, 1);
      this.url_display.setText(url_val);
      String show_url = show_name.replaceAll(" ", "+");
      String api_url = new StringBuilder().append("http://api.trakt.tv/search/shows.json/69c3d6904562825695e5d3c24835043c/").append(show_url).append("/1").toString();
      try {
        URL url = new URL(api_url);
        HttpURLConnection con = (HttpURLConnection)url.openConnection();
        con.setRequestMethod("GET");
        con.setRequestProperty("User-Agent", "Mozilla/5.0");
        int responseCode = con.getResponseCode();
        if (responseCode == 200)
          this.conn_stat.setText("Connection Status : OK");
        else {
          this.conn_stat.setText("Connection Status : ERR");
        }
        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));

        StringBuilder response = new StringBuilder();
        String inputLine;
        while ((inputLine = in.readLine()) != null) {
          response.append(inputLine);
        }
        in.close();
        String s = response.toString();
        JsonArray json = JsonArray.readFrom(s);
        for (int i = 0; i < json.size(); i++) {
          JsonObject show = json.get(i).asObject();
          String get_title = show.get("title").asString();
          int get_year = show.get("year").asInt();
          String get_overview = show.get("overview").asString();
          this.related_title.setText(get_title);
          this.related_year.setText(new StringBuilder().append("").append(get_year).toString());
          this.related_overview.setText(get_overview);
        }
      } catch (Exception e) {
        System.out.println(e.getMessage());
      }
    }

    private void doneActionPerformed(ActionEvent evt) {
      this.related_shows.setVisible(false);
    }

    private void subscribe_menuMouseClicked(MouseEvent evt) {
      this.subscribe.doClick();
    }

    private void unsubscribe_menuMouseClicked(MouseEvent evt) {
      this.unsubscribe.doClick();
    }

    private void subscribed_menuMouseClicked(MouseEvent evt) {
      this.shows_display.doClick();
    }

    private void recommend_menuMouseClicked(MouseEvent evt) {
      this.recommend.doClick();
    }

    private void quit_menuMouseClicked(MouseEvent evt) {
      System.exit(0);
    }

    private void dismissActionPerformed(ActionEvent evt) {
      this.help_dialog.setVisible(false);
    }

    private void help_menuMouseClicked(MouseEvent evt) {
      this.help_dialog.setVisible(true);
    }

    private void open_urlActionPerformed(ActionEvent evt) {
      int row_val = this.recommend_table.getSelectedRow();
      String url_val = (String)this.recommend_table.getValueAt(row_val, 1);
      try {
        URL show_url = new URL(url_val);
        Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
        desktop.browse(show_url.toURI());
      } catch (Exception e) {
        System.out.println(e.getMessage());
      }
    }

    private void formWindowOpened(WindowEvent evt) {
      this.conn_stat.setText("CHECKING FOR UPDATES");
      try {
        Class.forName("org.h2.Driver");
        this.conn = DriverManager.getConnection("jdbc:h2:~/lib/test", "sa", "");
        this.console.append("CONNECTED\n");
        this.stat = this.conn.createStatement();
        String create_table = "CREATE TABLE IF NOT EXISTS SCHEDULE (show varchar(40), season int)";
        this.stat.execute(create_table);
        update();
      } catch (Exception e) {
        System.out.println(e);
      }
      this.conn_stat.setText("DONE");
    }

    private void update_checkMouseClicked(MouseEvent evt) {
      update();
    }

    public void update() {
      try {
        String version = "";
        String available = "";
        String url = "jdbc:mysql://sql3.freemysqlhosting.net/sql322341";
        System.out.println(url);
        Class.forName("com.mysql.jdbc.Driver");
        Connection conn = DriverManager.getConnection(url, "sql322341", "yH7*xY2*");
        System.out.println("Database connection established");

        Statement stat = conn.createStatement();
        ResultSet rs = stat.executeQuery("SELECT * FROM sql322341.update");
        while (rs.next()) {
          available = rs.getString("available");
          version = rs.getString("version");
        }
        if (Integer.parseInt(available) == 1) {
          JOptionPane.showMessageDialog(null, new StringBuilder().append("Update Available\nVersion: ").append(version).append('\n').append("Please Download New Version").toString(), "Update Alert", 1);
        }
        conn.close();
      } catch (Exception e) {
        System.out.println(e);
      }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args)
    {
      /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
          for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
              UIManager.setLookAndFeel(info.getClassName());
              break;
            }

          }

        }
        catch (ClassNotFoundException ex)
        {
          Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
          Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
          Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
          Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
        }

        EventQueue.invokeLater(new Runnable()
        {
          public void run() {
            new main().setVisible(true);
          }
        });
      }
// Variables declaration - do not modify
      private JFrame alert;
      private JButton alert_btn;
      private JTable alert_table;
      private JLabel conn_stat;
      private JTextArea console;
      private JPanel console_panel;
      private JScrollPane console_scroll;
      private JButton console_toggle;
      private JPanel control_panel;
      private JButton dismiss;
      private JButton done;
      private JButton done_btn;
      private JLabel episode;
      private JLabel episode_display;
      private JButton get_schedule;
      private JLabel header;
      private JMenu help;
      private JDialog help_dialog;
      private JMenuItem help_menu;
      private JLabel image;
      private JLabel jLabel1;
      private JLabel jLabel2;
      private JLabel jLabel3;
      private JLabel jLabel4;
      private JLabel jLabel5;
      private JLabel jLabel6;
      private JLabel jLabel7;
      private JLabel jLabel8;
      private JScrollPane jScrollPane1;
      private JScrollPane jScrollPane2;
      private JScrollPane jScrollPane3;
      private JScrollPane jScrollPane4;
      private JScrollPane jScrollPane5;
      private JScrollPane jScrollPane6;
      private JSeparator jSeparator1;
      private JSeparator jSeparator2;
      private JSeparator jSeparator3;
      private JSeparator jSeparator4;
      private JSeparator jSeparator5;
      private JSeparator jSeparator6;
      private JSeparator jSeparator7;
      private JTextArea jTextArea1;
      private JMenu main;
      private JMenuBar main_menu;
      private JButton open_url;
      private JLabel overview;
      private JTextArea overview_display;
      private JMenuItem quit_menu;
      private JButton recommend;
      private JMenuItem recommend_menu;
      private JTable recommend_table;
      private JTextArea related_overview;
      private JFrame related_shows;
      private JLabel related_title;
      private JLabel related_year;
      private JTable schedule;
      private JScrollPane schedule_scroll;
      private JTextField season_name;
      private JSeparator separator;
      private JTextField show_name;
      private JButton show_subscribed;
      private JButton shows_display;
      private JButton subscribe;
      private JMenuItem subscribe_menu;
      private JMenuItem subscribed_menu;
      private JFrame subscribed_shows;
      private JTable subscribed_table;
      private JLabel title;
      private JLabel title_display;
      private JButton unsubscribe;
      private JMenuItem unsubscribe_menu;
      private JOptionPane update_alert;
      private JMenuItem update_check;
      private JLabel url_display;
    // End of variables declaration
    }
